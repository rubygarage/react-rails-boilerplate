# Entity
# - Описывает индивидуально существующие элементы домена
# - Определяется по идентификатору, а не по значению атрибутов
# - Непрерывно и однозначно определяется на всём протяжении существования

# Value Object
# - Не обладает идентификатором
# - Описывает элементы домена, полностью определяемые свойствами
# - Неизменяемый после создания
# - Используется для типизации и структурирования данных

# Aggregate
# - Собирательная сущность которая считается единым целым
# - Состоит из VO и Entity
# - Определяется по идентификатору
# - Является границей транзакции при изменении данных
# - Другие элементы домена не могут ссылаться на внутренности агрегата

# Агрегат — это граница уникальности для Entity
# - Один Entity не может быть в двух агрегатах одновременно
# - Такой Entity должен стать агрегатом

# Good practices
# - В конструкторе обязательные свойства
# - Необязательные — в сеттеры
# - Закрыто для изменения всё, что не изменяется по логике домена

# Repository
# - Репозитории создаются только для агрегатов
# - Необходимо решать вопрос гидратации данных - на основании полученных данных восстановить объекты

# Domain Services
# - Сервисы предоставляют приложению интерфейсы для работы с доменом
# - Содержат методы, описывающие операции домена
# - Не содержат состояния
# - Могут обращаться к репозиториям и другим сервисам
# - Уносят логику из контроллеров

# Data Transfer Object
# - Для передачи данных между частями приложения
# - Не содержит логики
# - Типизирует набор данных

# DTO необходим для передачи множества параметров (аргументов)

# DDD пропагандирует идею эксепшенов: метод либо делает полезную работу, либо кидает эксепшн

# Usage example -------------------------------------------------------------------------------------------------------

#########################################################
#  DO NOT TO USE User, Product AND OrderItem DIRECTLY!  #
#########################################################

current_user = User.find(1)

product_one = Product.find(1)
product_two = Product.find(2)

item_one = OrderItem.new(product_one, 1, 20.00)
item_two = OrderItem.new(product_two, 5, 5.00)

order = Order.new # Like Aggregate
order.setCustomer(customer)
order.addItem(item_one)
order.addItem(item_two)

OrderRepository.add(order)

saved_order = OrderRepository.getOrderById(1)
